language: cpp
#sudo: false
dist: trusty

matrix:
  include:
    - os: linux
      env: LLVM_VERSION=3.9.0
    - os: osx
      env: LLVM_CONFIG="llvm-config-3.9"
  allow_failures:
    - os: osx

#env:
  #- LLVM_CONFIG="llvm-config-3.7" OPTS="-DMULTILIB=ON"
  #- LLVM_CONFIG="llvm-config-3.6" OPTS="-DBUILD_SHARED_LIBS=ON"
  #- LLVM_CONFIG="llvm-config-3.5" OPTS="-DTEST_COVERAGE=ON"

#cache:
  #directories:
    #- llvm-3.9.0
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - libconfig++8-dev
    - gdb
    - gcc-4.9
    - g++-4.9
    - gcc-4.9-multilib
    - g++-4.9-multilib
    - gcc-multilib
    - g++-multilib
    - ninja-build
    # - linux-libc-dev:i386
    # - libcurl3:i386
    - libedit2
    - libedit-dev
#before_install:  # LLVM 3.9.0 segfaults in formLCSSAForInstructions, so use nightly 3.9 builds instead
  #-
    #if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      #if [ -z "$(ls -A llvm-$LLVM_VERSION)" ]; then
        #wget -O llvm-$LLVM_VERSION.tar.xz http://llvm.org/releases/$LLVM_VERSION/clang+llvm-$LLVM_VERSION-x86_64-linux-gnu-ubuntu-14.04.tar.xz;
        #mkdir llvm-$LLVM_VERSION;
        #tar -xvf llvm-$LLVM_VERSION.tar.xz --strip 1 -C llvm-$LLVM_VERSION;
      #fi;
      #llvm-$LLVM_VERSION/bin/llvm-config --version;
      #export LLVM_CONFIG="llvm-$LLVM_VERSION/bin/llvm-config";
    #fi
install:
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then export CC="gcc-4.9"; export CXX="g++-4.9"; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew update; brew install llvm39; brew install libconfig; fi;
  -
    if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      CMAKE_URL="http://www.cmake.org/files/v3.6/cmake-3.6.2-Linux-x86_64.tar.gz";
      mkdir cmake-bin && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake-bin;
      export PATH="$(pwd)/cmake-bin/bin:${PATH}";
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi
  - pip install --user lit
  - python -c "import lit; lit.main();" --version | head -n 1
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then gdb --version; fi

before_script:
  - curl http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -;
    echo "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main" | sudo tee -a /etc/apt/sources.list;
    sudo apt-get update -qq;
    sudo apt-get purge llvm;
    sudo apt-get install llvm-3.9 llvm-3.9-dev -y;
    export LLVM_CONFIG="/usr/bin/llvm-config-3.9";
  - mkdir build
  - cd build

script:
  - cmake -DLLVM_CONFIG=$(which ${LLVM_CONFIG}) $OPTS ..
  - make -j3
  # Outputs some environment info, plus makes sure we only run the test suite
  # if we could actually build the executable.
  - bin/ldc2 -version || exit 1
  # Build Phobos & druntime unittest modules.
  -
    if [ "${OPTS}" = "-DMULTILIB=ON" ]; then
      make -j2 phobos2-ldc-unittest-debug phobos2-ldc-unittest phobos2-ldc-unittest-debug-32 phobos2-ldc-unittest-32;
      make -j3 druntime-ldc-unittest-debug druntime-ldc-unittest druntime-ldc-unittest-debug-32 druntime-ldc-unittest-32;
    else
      make -j2 phobos2-ldc-unittest-debug phobos2-ldc-unittest;
      make -j3 druntime-ldc-unittest-debug druntime-ldc-unittest;
    fi
  # Run dmd-testsuite.
  - CC="" DMD_TESTSUITE_MAKE_ARGS=-j3 ctest --verbose -R "dmd-testsuite"
  # Run LLVM IR testsuite.
  - ctest --output-on-failure -V -R "lit-tests"
  # Link and run Phobos & druntime unittest runners.
  - ctest -j3 --output-on-failure -E "dmd-testsuite|lit-tests"

after_success:
  -
    if [[ "${OPTS}" == *TEST_COVERAGE*ON* ]]; then
      coveralls -e runtime -e tests -e vcbuild --gcov gcov-4.9 --gcov-options '\-lp' > /dev/null 2>&1;
    fi

notifications:
  email:
    recipients:
      - "syniurge@gmail.com"
    on_success: never
    on_failure: change
    use_notice: false
    skip_join: true
